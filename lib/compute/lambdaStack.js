"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaStack = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const aws_lambda_event_sources_1 = require("aws-cdk-lib/aws-lambda-event-sources");
const SQS = require("aws-cdk-lib/aws-sqs");
const aws_lambda_destinations_1 = require("aws-cdk-lib/aws-lambda-destinations");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
class LambdaStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const powertoolsLayer = lambda.LayerVersion.fromLayerVersionArn(this, "PowertoolsLayer", `arn:aws:lambda:${cdk.Stack.of(this).region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:18`);
        const dlq = new SQS.Queue(this, "dlq");
        const queueConsumer = new lambda.Function(this, "consumerFunction", {
            handler: "queueConsumer.main",
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset("src"),
            environment: {
                TABLE_NAME: props.ddbTable.tableName,
                QUEUE_NAME: props.queue.queueName,
                QUEUE_URL: props.queue.queueUrl,
            },
            tracing: aws_lambda_1.Tracing.ACTIVE,
            layers: [powertoolsLayer],
            onFailure: new aws_lambda_destinations_1.SqsDestination(dlq),
        });
        const process_order = new lambda.Function(this, "processOrder", {
            handler: "processOrder.main",
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset("src"),
            environment: {
                TABLE_NAME: props.ddbTable.tableName,
                QUEUE_NAME: props.queue.queueName,
                QUEUE_URL: props.queue.queueUrl,
            },
            layers: [powertoolsLayer],
        });
        process_order.addEventSource(new aws_lambda_event_sources_1.DynamoEventSource(props.ddbTable, {
            startingPosition: lambda.StartingPosition.LATEST,
        }));
        props.ddbTable.grantStreamRead(process_order);
        props.ddbTable.grantReadWriteData(process_order);
        const streamConsumer = new lambda.Function(this, "streamConsumer", {
            handler: "streamConsumer.main",
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset("src"),
            environment: {
                TABLE_NAME: props.ddbTable.tableName,
                QUEUE_NAME: props.queue.queueName,
                QUEUE_URL: props.queue.queueUrl,
            },
            layers: [powertoolsLayer],
            role: queueConsumer.role,
        });
        streamConsumer.addEventSource(new aws_lambda_event_sources_1.DynamoEventSource(props.ddbTable, {
            startingPosition: lambda.StartingPosition.LATEST,
        }));
        queueConsumer.addEventSource(new aws_lambda_event_sources_1.SqsEventSource(props.queue));
        props.queue.grantConsumeMessages(queueConsumer);
        props.queue.grantSendMessages(streamConsumer);
        props.ddbTable.grantReadWriteData(queueConsumer);
        props.ddbTable.grantStreamRead(streamConsumer);
        props.ddbTable.grantReadWriteData(streamConsumer);
    }
}
exports.LambdaStack = LambdaStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhU3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsYW1iZGFTdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFDbkMsaURBQWlEO0FBQ2pELG1GQUc4QztBQUc5QywyQ0FBMkM7QUFDM0MsaUZBQXFFO0FBQ3JFLHVEQUFpRDtBQVFqRCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsS0FBSztJQUN4QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXVCO1FBQy9ELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQzdELElBQUksRUFDSixpQkFBaUIsRUFDakIsa0JBQ0UsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFDckIsc0RBQXNELENBQ3ZELENBQUM7UUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXZDLE1BQU0sYUFBYSxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7WUFDbEUsT0FBTyxFQUFFLG9CQUFvQjtZQUM3QixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFDbEMsV0FBVyxFQUFFO2dCQUNYLFVBQVUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVM7Z0JBQ3BDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVM7Z0JBQ2pDLFNBQVMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVE7YUFDaEM7WUFDRCxPQUFPLEVBQUUsb0JBQU8sQ0FBQyxNQUFNO1lBQ3ZCLE1BQU0sRUFBRSxDQUFDLGVBQWUsQ0FBQztZQUN6QixTQUFTLEVBQUUsSUFBSSx3Q0FBYyxDQUFDLEdBQUcsQ0FBQztTQUNuQyxDQUFDLENBQUM7UUFFSCxNQUFNLGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUM5RCxPQUFPLEVBQUUsbUJBQW1CO1lBQzVCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUNsQyxXQUFXLEVBQUU7Z0JBQ1gsVUFBVSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUztnQkFDcEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUztnQkFDakMsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUTthQUNoQztZQUNELE1BQU0sRUFBRSxDQUFDLGVBQWUsQ0FBQztTQUMxQixDQUFDLENBQUM7UUFDSCxhQUFhLENBQUMsY0FBYyxDQUMxQixJQUFJLDRDQUFpQixDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDcEMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU07U0FDakQsQ0FBQyxDQUNILENBQUM7UUFFRixLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM5QyxLQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRWpELE1BQU0sY0FBYyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7WUFDakUsT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFDbEMsV0FBVyxFQUFFO2dCQUNYLFVBQVUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVM7Z0JBQ3BDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVM7Z0JBQ2pDLFNBQVMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVE7YUFDaEM7WUFDRCxNQUFNLEVBQUUsQ0FBQyxlQUFlLENBQUM7WUFDekIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUFJO1NBQ3pCLENBQUMsQ0FBQztRQUVILGNBQWMsQ0FBQyxjQUFjLENBQzNCLElBQUksNENBQWlCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNwQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTTtTQUNqRCxDQUFDLENBQ0gsQ0FBQztRQUVGLGFBQWEsQ0FBQyxjQUFjLENBQUMsSUFBSSx5Q0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRTlELEtBQUssQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEQsS0FBSyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM5QyxLQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pELEtBQUssQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLEtBQUssQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGO0FBMUVELGtDQTBFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYVwiO1xuaW1wb3J0IHtcbiAgRHluYW1vRXZlbnRTb3VyY2UsXG4gIFNxc0V2ZW50U291cmNlLFxufSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYS1ldmVudC1zb3VyY2VzXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0ICogYXMgRHluYW1vZGIgZnJvbSBcImF3cy1jZGstbGliL2F3cy1keW5hbW9kYlwiO1xuaW1wb3J0ICogYXMgU1FTIGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mtc3FzXCI7XG5pbXBvcnQgeyBTcXNEZXN0aW5hdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLWRlc3RpbmF0aW9uc1wiO1xuaW1wb3J0IHsgVHJhY2luZyB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhXCI7XG5cbi8vIGltcG9ydCB7Q2RrSW1zUHJvamVjdFN0YWNrfSBmcm9tICcuLi9jZGstaW1zLXByb2plY3Qtc3RhY2snO1xuXG5pbnRlcmZhY2UgTGFtYmRhU3RhY2tQcm9wcyBleHRlbmRzIGNkay5TdGFja1Byb3BzIHtcbiAgZGRiVGFibGU6IER5bmFtb2RiLlRhYmxlO1xuICBxdWV1ZTogU1FTLlF1ZXVlO1xufVxuZXhwb3J0IGNsYXNzIExhbWJkYVN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IExhbWJkYVN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IHBvd2VydG9vbHNMYXllciA9IGxhbWJkYS5MYXllclZlcnNpb24uZnJvbUxheWVyVmVyc2lvbkFybihcbiAgICAgIHRoaXMsXG4gICAgICBcIlBvd2VydG9vbHNMYXllclwiLFxuICAgICAgYGFybjphd3M6bGFtYmRhOiR7XG4gICAgICAgIGNkay5TdGFjay5vZih0aGlzKS5yZWdpb25cbiAgICAgIH06MDk0Mjc0MTA1OTE1OmxheWVyOkFXU0xhbWJkYVBvd2VydG9vbHNUeXBlU2NyaXB0OjE4YFxuICAgICk7XG4gICAgY29uc3QgZGxxID0gbmV3IFNRUy5RdWV1ZSh0aGlzLCBcImRscVwiKTtcblxuICAgIGNvbnN0IHF1ZXVlQ29uc3VtZXIgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiY29uc3VtZXJGdW5jdGlvblwiLCB7XG4gICAgICBoYW5kbGVyOiBcInF1ZXVlQ29uc3VtZXIubWFpblwiLFxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoXCJzcmNcIiksXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBUQUJMRV9OQU1FOiBwcm9wcy5kZGJUYWJsZS50YWJsZU5hbWUsXG4gICAgICAgIFFVRVVFX05BTUU6IHByb3BzLnF1ZXVlLnF1ZXVlTmFtZSxcbiAgICAgICAgUVVFVUVfVVJMOiBwcm9wcy5xdWV1ZS5xdWV1ZVVybCxcbiAgICAgIH0sXG4gICAgICB0cmFjaW5nOiBUcmFjaW5nLkFDVElWRSxcbiAgICAgIGxheWVyczogW3Bvd2VydG9vbHNMYXllcl0sXG4gICAgICBvbkZhaWx1cmU6IG5ldyBTcXNEZXN0aW5hdGlvbihkbHEpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgcHJvY2Vzc19vcmRlciA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJwcm9jZXNzT3JkZXJcIiwge1xuICAgICAgaGFuZGxlcjogXCJwcm9jZXNzT3JkZXIubWFpblwiLFxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoXCJzcmNcIiksXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBUQUJMRV9OQU1FOiBwcm9wcy5kZGJUYWJsZS50YWJsZU5hbWUsXG4gICAgICAgIFFVRVVFX05BTUU6IHByb3BzLnF1ZXVlLnF1ZXVlTmFtZSxcbiAgICAgICAgUVVFVUVfVVJMOiBwcm9wcy5xdWV1ZS5xdWV1ZVVybCxcbiAgICAgIH0sXG4gICAgICBsYXllcnM6IFtwb3dlcnRvb2xzTGF5ZXJdLFxuICAgIH0pO1xuICAgIHByb2Nlc3Nfb3JkZXIuYWRkRXZlbnRTb3VyY2UoXG4gICAgICBuZXcgRHluYW1vRXZlbnRTb3VyY2UocHJvcHMuZGRiVGFibGUsIHtcbiAgICAgICAgc3RhcnRpbmdQb3NpdGlvbjogbGFtYmRhLlN0YXJ0aW5nUG9zaXRpb24uTEFURVNULFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgcHJvcHMuZGRiVGFibGUuZ3JhbnRTdHJlYW1SZWFkKHByb2Nlc3Nfb3JkZXIpO1xuICAgIHByb3BzLmRkYlRhYmxlLmdyYW50UmVhZFdyaXRlRGF0YShwcm9jZXNzX29yZGVyKTtcblxuICAgIGNvbnN0IHN0cmVhbUNvbnN1bWVyID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcInN0cmVhbUNvbnN1bWVyXCIsIHtcbiAgICAgIGhhbmRsZXI6IFwic3RyZWFtQ29uc3VtZXIubWFpblwiLFxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoXCJzcmNcIiksXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBUQUJMRV9OQU1FOiBwcm9wcy5kZGJUYWJsZS50YWJsZU5hbWUsXG4gICAgICAgIFFVRVVFX05BTUU6IHByb3BzLnF1ZXVlLnF1ZXVlTmFtZSxcbiAgICAgICAgUVVFVUVfVVJMOiBwcm9wcy5xdWV1ZS5xdWV1ZVVybCxcbiAgICAgIH0sXG4gICAgICBsYXllcnM6IFtwb3dlcnRvb2xzTGF5ZXJdLFxuICAgICAgcm9sZTogcXVldWVDb25zdW1lci5yb2xlLFxuICAgIH0pO1xuXG4gICAgc3RyZWFtQ29uc3VtZXIuYWRkRXZlbnRTb3VyY2UoXG4gICAgICBuZXcgRHluYW1vRXZlbnRTb3VyY2UocHJvcHMuZGRiVGFibGUsIHtcbiAgICAgICAgc3RhcnRpbmdQb3NpdGlvbjogbGFtYmRhLlN0YXJ0aW5nUG9zaXRpb24uTEFURVNULFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgcXVldWVDb25zdW1lci5hZGRFdmVudFNvdXJjZShuZXcgU3FzRXZlbnRTb3VyY2UocHJvcHMucXVldWUpKTtcblxuICAgIHByb3BzLnF1ZXVlLmdyYW50Q29uc3VtZU1lc3NhZ2VzKHF1ZXVlQ29uc3VtZXIpO1xuICAgIHByb3BzLnF1ZXVlLmdyYW50U2VuZE1lc3NhZ2VzKHN0cmVhbUNvbnN1bWVyKTtcbiAgICBwcm9wcy5kZGJUYWJsZS5ncmFudFJlYWRXcml0ZURhdGEocXVldWVDb25zdW1lcik7XG4gICAgcHJvcHMuZGRiVGFibGUuZ3JhbnRTdHJlYW1SZWFkKHN0cmVhbUNvbnN1bWVyKTtcbiAgICBwcm9wcy5kZGJUYWJsZS5ncmFudFJlYWRXcml0ZURhdGEoc3RyZWFtQ29uc3VtZXIpO1xuICB9XG59XG4iXX0=