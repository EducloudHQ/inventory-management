"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const aws_sdk_1 = require("aws-sdk");
const batch_1 = require("@aws-lambda-powertools/batch");
const ddbClient = new aws_sdk_1.DynamoDB.DocumentClient();
const tableName = process.env.TABLE_NAME;
const processor = new batch_1.BatchProcessor(batch_1.EventType.SQS);
const recordHandler = async (record) => {
    const payload = record.body;
    if (payload) {
        const order = JSON.parse(payload);
        console.log("Processed item", { order });
        const userId = order.PK.S;
        for (const item of order.orderItems.L) {
            console.log(item);
            const element = item.M.SK;
            const params = {
                TableName: tableName,
                Key: {
                    PK: `${userId}`,
                    SK: `${element.S}`,
                },
                UpdateExpression: "set cartProductStatus = :status, UpdateOn = :Updated",
                ExpressionAttributeValues: {
                    ":status": "ORDERED",
                    ":Updated": Date.now().toString(),
                },
                ReturnValues: "UPDATED_NEW",
            };
            try {
                const res = await ddbClient.update(params).promise();
                console.log("Response", { res });
            }
            catch (err) {
                // logger.info("Error: ", { err });
            }
        }
    }
};
const main = async (event, context) => {
    return (0, batch_1.processPartialResponse)(event, recordHandler, processor, {
        context,
    });
};
exports.main = main;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBbUM7QUFFbkMsd0RBSXNDO0FBRXRDLE1BQU0sU0FBUyxHQUFHLElBQUksa0JBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNoRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQW9CLENBQUM7QUFDbkQsTUFBTSxTQUFTLEdBQUcsSUFBSSxzQkFBYyxDQUFDLGlCQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFcEQsTUFBTSxhQUFhLEdBQUcsS0FBSyxFQUFFLE1BQWlCLEVBQWlCLEVBQUU7SUFDL0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztJQUM1QixJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDekMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtZQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzFCLE1BQU0sTUFBTSxHQUFHO2dCQUNiLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixHQUFHLEVBQUU7b0JBQ0gsRUFBRSxFQUFFLEdBQUcsTUFBTSxFQUFFO29CQUNmLEVBQUUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDLEVBQUU7aUJBQ25CO2dCQUNELGdCQUFnQixFQUNkLHNEQUFzRDtnQkFDeEQseUJBQXlCLEVBQUU7b0JBQ3pCLFNBQVMsRUFBRSxTQUFTO29CQUNwQixVQUFVLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRTtpQkFDbEM7Z0JBQ0QsWUFBWSxFQUFFLGFBQWE7YUFDNUIsQ0FBQztZQUNGLElBQUk7Z0JBQ0YsTUFBTSxHQUFHLEdBQUcsTUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7YUFDbEM7WUFBQyxPQUFPLEdBQVksRUFBRTtnQkFDckIsbUNBQW1DO2FBQ3BDO1NBQ0Y7S0FDRjtBQUNILENBQUMsQ0FBQztBQUVLLE1BQU0sSUFBSSxHQUFHLEtBQUssRUFDdkIsS0FBZSxFQUNmLE9BQWdCLEVBQ1csRUFBRTtJQUM3QixPQUFPLElBQUEsOEJBQXNCLEVBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUU7UUFDN0QsT0FBTztLQUNSLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVBXLFFBQUEsSUFBSSxRQU9mIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU1FTRXZlbnQsIFNRU1JlY29yZCwgQ29udGV4dCwgU1FTQmF0Y2hSZXNwb25zZSB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5pbXBvcnQgeyBEeW5hbW9EQiB9IGZyb20gXCJhd3Mtc2RrXCI7XG5pbXBvcnQgeyBsb2dnZXIsIG1ldHJpY3MsIHRyYWNlciB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtcbiAgQmF0Y2hQcm9jZXNzb3IsXG4gIEV2ZW50VHlwZSxcbiAgcHJvY2Vzc1BhcnRpYWxSZXNwb25zZSxcbn0gZnJvbSBcIkBhd3MtbGFtYmRhLXBvd2VydG9vbHMvYmF0Y2hcIjtcblxuY29uc3QgZGRiQ2xpZW50ID0gbmV3IER5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5jb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIGFzIHN0cmluZztcbmNvbnN0IHByb2Nlc3NvciA9IG5ldyBCYXRjaFByb2Nlc3NvcihFdmVudFR5cGUuU1FTKTtcblxuY29uc3QgcmVjb3JkSGFuZGxlciA9IGFzeW5jIChyZWNvcmQ6IFNRU1JlY29yZCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBwYXlsb2FkID0gcmVjb3JkLmJvZHk7XG4gIGlmIChwYXlsb2FkKSB7XG4gICAgY29uc3Qgb3JkZXIgPSBKU09OLnBhcnNlKHBheWxvYWQpO1xuXG4gICAgY29uc29sZS5sb2coXCJQcm9jZXNzZWQgaXRlbVwiLCB7IG9yZGVyIH0pO1xuICAgIGNvbnN0IHVzZXJJZCA9IG9yZGVyLlBLLlM7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIG9yZGVyLm9yZGVySXRlbXMuTCkge1xuICAgICAgY29uc29sZS5sb2coaXRlbSk7XG4gICAgICBjb25zdCBlbGVtZW50ID0gaXRlbS5NLlNLO1xuICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcbiAgICAgICAgS2V5OiB7XG4gICAgICAgICAgUEs6IGAke3VzZXJJZH1gLFxuICAgICAgICAgIFNLOiBgJHtlbGVtZW50LlN9YCxcbiAgICAgICAgfSxcbiAgICAgICAgVXBkYXRlRXhwcmVzc2lvbjpcbiAgICAgICAgICBcInNldCBjYXJ0UHJvZHVjdFN0YXR1cyA9IDpzdGF0dXMsIFVwZGF0ZU9uID0gOlVwZGF0ZWRcIixcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge1xuICAgICAgICAgIFwiOnN0YXR1c1wiOiBcIk9SREVSRURcIixcbiAgICAgICAgICBcIjpVcGRhdGVkXCI6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgfSxcbiAgICAgICAgUmV0dXJuVmFsdWVzOiBcIlVQREFURURfTkVXXCIsXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZGRiQ2xpZW50LnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJSZXNwb25zZVwiLCB7IHJlcyB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycjogdW5rbm93bikge1xuICAgICAgICAvLyBsb2dnZXIuaW5mbyhcIkVycm9yOiBcIiwgeyBlcnIgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbWFpbiA9IGFzeW5jIChcbiAgZXZlbnQ6IFNRU0V2ZW50LFxuICBjb250ZXh0OiBDb250ZXh0XG4pOiBQcm9taXNlPFNRU0JhdGNoUmVzcG9uc2U+ID0+IHtcbiAgcmV0dXJuIHByb2Nlc3NQYXJ0aWFsUmVzcG9uc2UoZXZlbnQsIHJlY29yZEhhbmRsZXIsIHByb2Nlc3Nvciwge1xuICAgIGNvbnRleHQsXG4gIH0pO1xufTsiXX0=