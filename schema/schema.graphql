enum TYPE {
  ADMIN
  EMPLOYEE
  CUSTOMER
}

type Schema {
  query: Query
  mutation: Mutation
}

type User @aws_api_key @aws_cognito_user_pools {
  PK: ID!
  name: String!
  email: String!
  password: String
  userType: TYPE!
  CreateAt: AWSDateTime
  UpdatedAt: AWSDateTime
  phone: String
  address: String
  items: [Item]
}

type UserResult {
  items: [User!]
  nextToken: String
}

type Item @aws_api_key @aws_cognito_user_pools {
  PK: ID!
  name: String!
  description: String!
  quantity_in_stock: Int!
  createAt: AWSDateTime
  updatedAt: AWSDateTime
  images: String
  price: Float!
}

type ItemResult {
  items: [Item!]
  nextToken: String
}

type Order {
  PK: ID!
  items: [Item!]
  total_price: Float
  createAt: AWSDateTime
  updatedAt: AWSDateTime
  orderStatus: String
  total_qauntity: Int
}

type PlaceOrder {
  PK: ID!
  status: String
  message: String
  createOn: AWSDateTime
  updatedOn: AWSDateTime
}

type Query {
  getUsers(limit: Int, nextToken: String): UserResult
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["admin"])

  getItems(limit: Int, nextToken: String): ItemResult
    @aws_api_key
    @aws_cognito_user_pools

  getItem(id: String): ItemResult @aws_api_key @aws_cognito_user_pools

  getUserItems(id: ID!, limit: Int, nextToken: String): User
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["admin", "user"])
}

input CreateUser {
  name: String!
  email: String!
  userType: TYPE!
  createAt: AWSDateTime
  updatedAt: AWSDateTime
  phone: String
  address: String
}

input CreateItem {
  name: String!
  description: String
  quantity_in_stock: Int!
  images: String
  userId: ID!
  price: Float!
}

input UpdateItem {
  id: ID!
  name: String
  description: String
  price: Float
  quantity: Int
}

input AddItemToCart {
  item: ID!
  userId: ID!
  quantity: Int!
  unit_price: Float!
}

input PlaceOrderInput {
  userId: ID!
  total_price: Float
  createAt: AWSDateTime
}

type Mutation {
  createUser(input: CreateUser!): User @aws_api_key

  createItem(input: CreateItem!): Item
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["admin", "employee"])

  addItemToCart(input: AddItemToCart): Item!

  placeOrder(input: PlaceOrderInput): PlaceOrder!
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) # Basic Subscription filtering
  onCreateItem: Item @aws_subscribe(mutations: ["createItem"]) # Basic subscription filtering
  onPlaceOrder: PlaceOrder @aws_subscribe(mutations: ["placeOrder"])
}
