enum TYPE {
  ADMIN
  EMPLOYEE
}

type User @aws_api_key @aws_cognito_user_pools {
  id: ID!
  name: String!
  email: String!
  password: String!
  type: String
  CreateOn: AWSDateTime
  UpdatedOn: AWSDateTime
  phone: String
  address: String
  inventory: [Inventory]
}

type Inventory {
  id: ID!
  items: [Item]!
  CreateOn: AWSDateTime
  UpdatedOn: AWSDateTime
  employee: User!
}

type Item @aws_api_key @aws_cognito_user_pools {
  id: ID!
  name: String!
  description: String!
  quantity_in_stock: Int!
  CreateOn: AWSDateTime
  UpdatedOn: AWSDateTime
  images: String
  price: Float!
  inventoryId: ID!
}

type Order {
  id: ID!
  items: [Item!]
  total_price: Float
  CreateOn: AWSDateTime
  UpdatedOn: AWSDateTime
  orderStatus: String
  total_qauntity: Int
}

type PlaceOrder {
  id: ID!
  status: String
  message: String
  CreateOn: AWSDateTime
  UpdatedOn: AWSDateTime
}
type Query {
  users: [User]! @aws_api_key @aws_cognito_user_pools(cognito_groups: ["admin"])

  items: [Item]! @aws_api_key @aws_cognito_user_pools

  inventories: [Inventory]!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["admin", "user"])

  inventory(id: ID!): Inventory @aws_api_key @aws_cognito_user_pools

  getUserInventories(id: ID!): User
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["admin", "user"])

  getUsersInventoriesItems: User
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["admin", "user"])

  getInventoryItems(inventoryId: ID!): Inventory
}

input CreateUser {
  name: String!
  email: String!
}

input CreateItem {
  name: String!
  description: String
  quantity_in_stock: Int!
  images: String
  inventoryId: ID!
  employeeId: ID!
  price: Float!
}

input UpdateItem {
  id: ID!
  name: String
  description: String
  price: Float
  quantity: Int
}

input CreateInventory {
  employeeId: ID!
}

input AddItemToCart {
  item: ID!
  userId: ID!
  quantity: Int!
  unit_price: Float!
}

input PlaceOrderInput {
  userId: ID!
  total_price: Float
  createAt: AWSDateTime
}

type Mutation {
  createUser(input: CreateUser!): User
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["admin"])

  createItem(input: CreateItem!): Item
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["admin", "employee"])

  createInventory(input: CreateInventory): Inventory!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["admin", "employee"])

  addItemToCart(input: AddItemToCart): Item!

  placeOrder(input: PlaceOrderInput): PlaceOrder!
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) # Basic Subscription filtering
  onCreateItem: Item @aws_subscribe(mutations: ["createItem"]) # Basic subscription filtering
  onPlaceOrder: PlaceOrder @aws_subscribe(mutations: ["placeOrder"])
}
